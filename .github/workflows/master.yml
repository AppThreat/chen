name: master
on:
  workflow_dispatch:    # allow to manually trigger this workflow
  push:
    branches: [main]
    tags: ["*"]
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: false
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
      - uses: sbt/setup-sbt@v1
      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "8.4"
          tools: composer:v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '23.x'
      - uses: oras-project/setup-oras@v1
      - name: Delete `.rustup` directory
        run: rm -rf /home/runner/.rustup # to save disk space
        if: runner.os == 'Linux'
      - name: Delete `.cargo` directory # to save disk space
        run: rm -rf /home/runner/.cargo
        if: runner.os == 'Linux'
      - name: Install graphviz-dev
        run: sudo apt install -y graphviz-dev
        if: runner.os == 'Linux'
      - name: Install graphviz-dev
        run: |
          brew install graphviz sbt
          export C_INCLUDE_PATH="$(brew --prefix graphviz)/include/"
          export LIBRARY_PATH="$(brew --prefix graphviz)/lib/"
          pip install --use-pep517 --config-setting="--global-option=build_ext" pygraphviz
        if: runner.os == 'macOS'
      - name: Install and test
        run: |
          bash ./platform/frontends/php2atom/install.sh
          npm install -g @appthreat/atom
          python3.12 -m pip install --upgrade pip setuptools
          python3.12 -m pip install poetry
          python3.12 -m poetry config virtualenvs.create false
          python3.12 -m poetry install --no-cache
          python3.12 -m poetry run flake8 chenpy --count --select=E9,F63,F7,F82 --show-source --statistics
      - uses: actions/cache@v4
        with:
          path: |
            ~/.sbt
            ~/.coursier
          key: ${{ runner.os }}-sbt-${{ hashfiles('**/build.sbt') }}
      - run: sbt scalafmtCheck +test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF-8 -Djna.library.path=${{ env.Python3_ROOT_DIR }}"
          SCALAPY_PYTHON_LIBRARY: "python3.12"
        if: runner.os != 'Windows'
      - name: Compile and run tests
        run: sbt scalafmtCheck +test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF-8 -Djna.library.path=${{ env.Python3_ROOT_DIR }}"
          SCALAPY_PYTHON_LIBRARY: "python3"
        if: runner.os == 'Windows'
      - name: Generate SBOM with cdxgen
        run: |
          npm install -g @cyclonedx/cdxgen
          cdxgen -t sbt -o bom.json . -p --no-recurse
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCALAPY_PYTHON_LIBRARY: "python3.12"
