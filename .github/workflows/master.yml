name: master
on:
  workflow_dispatch:    # allow to manually trigger this workflow
  push:
    branches: [main]
    tags: ["*"]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: "8.3"
          tools: composer:v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
      - name: Delete `.rustup` directory
        run: rm -rf /home/runner/.rustup # to save disk space
        if: runner.os == 'Linux'
      - name: Delete `.cargo` directory # to save disk space
        run: rm -rf /home/runner/.cargo
        if: runner.os == 'Linux'
      - name: Install graphviz-dev
        run: sudo apt install -y graphviz-dev
        if: runner.os == 'Linux'
      - name: Install graphviz-dev
        run: |
          brew install graphviz
          python -m pip install \
              --global-option=build_ext \
              --global-option="-I$(brew --prefix graphviz)/include/" \
              --global-option="-L$(brew --prefix graphviz)/lib/" \
              pygraphviz
        if: runner.os == 'macOS'
      - name: Install and test
        run: |
          bash ./platform/frontends/php2atom/install.sh
          npm install -g @appthreat/atom
          python3.11 -m pip install --upgrade pip
          python3.11 -m pip install poetry
          python3.11 -m poetry config virtualenvs.create false
          python3.11 -m poetry install --no-cache
          python3.11 -m poetry run flake8 chenpy --count --select=E9,F63,F7,F82 --show-source --statistics
      - uses: actions/cache@v4
        with:
          path: |
            ~/.sbt
            ~/.coursier
          key: ${{ runner.os }}-sbt-${{ hashfiles('**/build.sbt') }}
      - run: sbt scalafmtCheck +test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF-8 -Djna.library.path=${{ env.Python3_ROOT_DIR }}"
          SCALAPY_PYTHON_LIBRARY: "python3.11"
        if: runner.os != 'Windows'
      - name: Compile and run tests
        run: sbt scalafmtCheck +test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAVA_TOOL_OPTIONS: "-Dfile.encoding=UTF-8 -Djna.library.path=${{ env.Python3_ROOT_DIR }}"
          SCALAPY_PYTHON_LIBRARY: "python3"
        if: runner.os == 'Windows'
